{"version":3,"sources":["ShareBill.js","serviceWorker.js","index.js"],"names":["roundTo","n","digits","undefined","multiplicator","Math","pow","parseFloat","toFixed","round","Member","props","this","name","onAddBill","onChangeBill","onChangeName","bills","map","num","index","type","value","step","min","onChange","e","push","billPrice","forEach","ncols","padding","Array","length","fill","onClick","onDel","disabled","pay","React","Component","DummyMember","newMemberName","onChangeNewMemberName","onBlur","onAdd","Summary","sumBill","sumPay","sumDiscount","onChangeSumPay","ShareBill","state","members","event","target","setState","splice","updateBill","m","i","member","bill","x","discount","max","billIndex","onlyOneMember","onChangeMemberName","bind","onDelMember","onAddMemberBill","onChangeMemberBill","border","onAddMember","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea9c7a7a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction roundTo(n, digits) {\n  if (digits === undefined) {\n      digits = 0;\n  }\n\n  var multiplicator = Math.pow(10, digits);\n  n = parseFloat((n * multiplicator).toFixed(11));\n  return Math.round(n) / multiplicator;\n}\n\nclass Member extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    const props = this.props;\n    const name = props.name;\n    const onAddBill = props.onAddBill;\n    const onChangeBill = props.onChangeBill;\n    const onChangeName = props.onChangeName;\n    let bills = props.bills.map((num,index)=> \n      <td>\n        <input type=\"number\" value={num} step=\"0.1\" min=\"0\" onChange={(e)=>onChangeBill(index, e)}/>\n      </td>\n    );\n    bills.push(<td><input type=\"number\" step=\"0.1\" min=\"0\" onChange={onAddBill}/></td>);\n    let billPrice = 0;\n    props.bills.forEach(num => billPrice += parseFloat(num));\n    const ncols = props.ncols;\n    const padding = Array(ncols-(bills.length-1)).fill(<td></td>);\n    return (\n      <tr>\n        <button onClick={props.onDel} disabled={props.disabled}>-</button>\n        <td><input type=\"text\" value={name} onChange={onChangeName}/></td>\n        {bills}\n        {padding}\n        <td>{billPrice}</td>\n        <td>{props.pay}</td>\n        <td>{roundTo(billPrice-props.pay, 2)}</td>\n      </tr>\n    );\n  }\n}\n\nfunction DummyMember(props){\n    const newMemberName = props.newMemberName;\n    return (\n    <tr>\n      <td></td>\n      <td><input type=\"text\" value={newMemberName} onChange={props.onChangeNewMemberName} onBlur={props.onAdd}/></td>\n    </tr>\n  );\n}\n\nfunction Summary(props){\n  const ncols = props.ncols;\n  const sumBill = props.sumBill;\n  const sumPay = props.sumPay;\n  const sumDiscount = roundTo(sumBill - sumPay, 2);\n  const padding = Array(ncols+1).fill(<th></th>);\n  const onChangeSumPay = props.onChangeSumPay;\n  return (\n    <tr>\n      <th></th>\n      <th>汇总</th>\n      {padding}\n      <th>{sumBill}</th>\n      <th><input type=\"number\" value={sumPay==0?'':sumPay} step=\"0.1\" min=\"0\" onChange={onChangeSumPay} /></th>\n      <th>{sumDiscount}</th>\n    </tr>\n  );\n}\n\nclass ShareBill extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      ncols: 0,\n      members: [\n        {name:'自己', bills:[], pay:0}\n      ],\n      newMemberName: \"\",\n      sumBill: 0,\n      sumPay: 0,\n    };\n  }\n\n  onAddMember(event){\n    const value = event.target.value;\n    if(value){\n      let members = this.state.members;\n      members.push({name:value, bills:[]});\n      this.setState({members: members, newMemberName: \"\",});\n    }\n  }\n\n  onDelMember(index){\n    let members = this.state.members;\n    members.splice(index, 1);\n    this.setState({members: members});\n    this.updateBill();\n  }\n\n  onChangeNewMemberName(event){\n    const value = event.target.value;\n    this.setState({newMemberName: value});\n  }\n\n  onChangeMemberName(index, event){\n    let members = this.state.members;\n    let member = members[index];\n    member.name = event.target.value;\n    this.setState({members: members});\n  }\n\n  updateBill(){\n      let members = this.state.members;\n      let sumBill = 0;\n      members.forEach(m=>m.bills.forEach(num=>sumBill+=num));\n      const sumPay = this.state.sumPay;\n      let sumDiscount = roundTo(sumBill - sumPay, 2);\n\n      for(let i=0; i<members.length; ++i){\n        let member = members[i];\n        let bill = 0;\n        member.bills.forEach(x=> bill+=x);\n        const weight = bill / sumBill;\n        const discount = roundTo(sumDiscount * weight, 2);\n        member.pay = roundTo(bill - discount, 2);\n      }\n      this.setState({members: members, sumBill: sumBill, sumDiscount: sumDiscount});\n    }\n\n  onAddMemberBill(index, event){\n    let members = this.state.members;\n    const value = event.target.value;\n    const num = parseFloat(value);\n    if(num > 0){\n        let member = members[index];\n        member.bills.push(num);\n        let ncols = this.state.ncols;\n        ncols = Math.max(ncols, member.bills.length);\n        this.setState({members: members, ncols: ncols});\n        this.updateBill();\n    }\n  }\n\n  onChangeMemberBill(index, billIndex, event){\n    const value = event.target.value;\n    let members = this.state.members;\n    let member = members[index];\n    if(!value){\n      member.bills.splice(billIndex, 1);\n      let ncols = 0;\n      members.forEach(m => ncols = Math.max(ncols, m.bills.length));\n      this.setState({members: members, ncols: ncols});\n    }\n    else{\n      const num = parseFloat(value);\n      member.bills[billIndex] = num;\n      this.setState({members: members});\n    }\n    this.updateBill();\n  }\n\n  onChangeSumPay(event){\n    const value = event.target.value;\n    const num = parseFloat(value);\n    if(num > 0){\n      this.state.sumPay = num;\n      this.setState({sumPay: num});\n    }\n    else{\n      this.state.sumPay = 0;\n      this.setState({sumPay: 0});\n    }\n    this.updateBill();\n  }\n\n  render(){\n    const onlyOneMember = this.state.members.length <= 1;\n    let members = this.state.members.map(\n      (m,index) =>\n        <Member\n          name={m.name}\n          bills={m.bills}\n          ncols={this.state.ncols}\n          onChangeName={this.onChangeMemberName.bind(this, index)}\n          onDel={this.onDelMember.bind(this, index)}\n          onAddBill={this.onAddMemberBill.bind(this, index)}\n          onChangeBill={this.onChangeMemberBill.bind(this, index)}\n          disabled={onlyOneMember}\n          pay={m.pay}\n        />\n    );\n    return (\n      <div>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>名字</th>\n            {Array(this.state.ncols+1).fill('价格').map((e,i) => <th>{e+(i+1)}</th>)}\n            <th>账单价格</th>\n            <th>支付价格</th>\n            <th>优惠</th>\n          </tr>\n        </thead>\n        <tbody>\n          {members}\n          <DummyMember \n            newMemberName={this.state.newMemberName}\n            onChangeNewMemberName={this.onChangeNewMemberName.bind(this)}\n            onAdd={this.onAddMember.bind(this)}\n          />\n          <Summary \n            ncols={this.state.ncols}\n            sumBill={this.state.sumBill}\n            sumPay={this.state.sumPay}\n            onChangeSumPay={this.onChangeSumPay.bind(this)}\n          />\n        </tbody>\n      </table>\n      </div>\n    );\n  }\n}\n\nexport default ShareBill;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './ShareBill';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}